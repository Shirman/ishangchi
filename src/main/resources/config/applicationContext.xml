<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-autowire="byName">
	<!--
		注意上面的default-autowire="byName"，如果没有这个声明不会被注入
	-->

	<description>Spring-database配置</description>
	<import resource="app-service.xml"/>

	<!--
		自动扫描组件，这里要把web下面的
		controller去除，他们是在servlet-servlet.xml中配置的，如果不去除会影响事务管理的。
	-->
	<context:component-scan base-package="com.shirman.ishangchi">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${catalina.home}/etc/db/jdbc.properties</value>
			</list>
		</property>
	</bean>
    
	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<!-- <bean class="com.olymtech.util.spring.SpringContextHolder" lazy-init="false" /> -->
	<!-- MyBatis配置 -->
	<bean id="mybatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/config/sqlMapConfig.xml" />
	<!-- 	自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.shirman.ishangchi.rest.entity" />
	<!-- 	显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/config/mappers/*Mapper.xml" />
	</bean>
	
		<!-- 扫描basePackage下所有以@Repository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.shirman.ishangchi.rest.dao" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
		<property name="sqlSessionFactoryBeanName" value="mybatisSqlSessionFactory" />
	</bean>

		
		<!-- 连接池配置:
		初始化连接:5 ,最大连接数量:10 , 最小空闲连接:2,最大空闲连接:10 超时等待时间以毫秒为单位:1000ms , 是否在自动回收超时连接的时候打印连接的超时错误：是 
		是否自动回收超时连接：是   超时时间(以秒数为单位)：180s  -->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${ishangchi-jdbc.driver}" />
		<property name="url" value="${ishangchi-jdbc.url}" />
		<property name="username" value="${ishangchi-jdbc.username}" />
		<property name="password" value="${ishangchi-jdbc.password}" />
		<property name="initialSize" value="${ishangchi-jdbc.initialSize}"></property>
		<property name="maxActive" value="${ishangchi-jdbc.maxActive}"></property>
		
		
		<property name="minIdle" value="${ishangchi-jdbc.minIdle}"></property>
		<property name="maxIdle" value="${ishangchi-jdbc.maxIdle}"></property>
		<property name="maxWait" value="${ishangchi-jdbc.maxWait}"></property>
		<property name="logAbandoned" value="true" ></property>
		<property name="removeAbandoned" value="true" ></property>
		<property name="removeAbandonedTimeout" value="180" ></property>
		<property name="validationQuery" value="select now() from dual"/>
		
	
			
			<!--   初始化连接  
			dataSource.initialSize=10
			  最大空闲连接  
			dataSource.maxIdle=10
			  最小空闲连接  
			dataSource.minIdle=5
			#最大连接数量
			dataSource.maxActive=50
			#是否在自动回收超时连接的时候打印连接的超时错误
			dataSource.logAbandoned=true
			#是否自动回收超时连接
			dataSource.removeAbandoned=true
			#超时时间(以秒数为单位)
			dataSource.removeAbandonedTimeout=180
			 超时等待时间以毫秒为单位 60000毫秒/1000等于60秒 
			dataSource.maxWait=1000
			<property name="defaultAutoCommit" value="true"></property> -->
		
	</bean>
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务特性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="batch*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="validate*" propagation="REQUIRED" />
			<tx:method name="off*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的方法需要进行事务管理 -->
	<aop:config>
		<aop:pointcut id="allManagerMethod" expression="execution(* com.shirman.ishangchi.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
	</aop:config>
</beans>